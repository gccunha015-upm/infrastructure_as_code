VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "hashicorp/precise32"

  config.vm.define :db do |db_config|
    db_config.vm.hostname = "db"
    db_config.vm.network  :private_network,
                          :ip => "192.168.33.10"
    # Determina o provisionador como script de terminal
    db_config.vm.provision "shell", path: "boot.sh"
    # Determina o provisionador como ansible na propria maquina
    db_config.vm.provision "ansible_local" do |ansible|
      # Determina arquivo de provisionamento
      ansible.playbook = "db/playbook.yml"
      # Determina grupo de hosts disponiveis
      ansible.limit = "#{db_config.vm.hostname}, localhost"
      # Determina que provisionamento deve ser feito pelo usuario root
      ansible.become = true
    end
  end

  config.vm.define :web do |web_config|
    web_config.vm.hostname = "web"
    web_config.vm.network :private_network,
                          :ip => "192.168.33.12"
    web_config.vm.provision "shell", path: "boot.sh"
    web_config.vm.provision "ansible_local" do |ansible|
      ansible.playbook = "web/playbook.yml"
      ansible.limit = "#{web_config.vm.hostname}, localhost"
      ansible.become = true
    end
  end

  config.vm.define :monitor do |monitor_config|
    monitor_config.vm.hostname = "monitor"
    monitor_config.vm.network :private_network,
                              :ip => "192.168.33.14"
    monitor_config.vm.provision "shell", path: "boot.sh"
    monitor_config.vm.provision "ansible_local" do |ansible|
      ansible.playbook = "monitor/playbook.yml"
      ansible.limit = "#{monitor_config.vm.hostname}, localhost"
      ansible.become = true
    end
  end

end
